syntax = "proto3";
import "response/user.proto";
import "request/user.proto";
import "request/server.proto";
import "response/server.proto";
import "request/plan.proto";
import "response/plan.proto";
import "request/transaction.proto";
import "response/transaction.proto";
import "request/command.proto";
import "response/command.proto";
import "health/health.proto";

package core;

service userController {
  rpc createUser(user.request.types.createUserInput) returns (user.response.types.postgresUser) {}
  rpc getUserInformationById(user.request.types.getUserInputId) returns (user.response.types.getUserResponse) {}
  rpc getUserInformationByEmail(user.request.types.getUserInputEmail) returns (user.response.types.getUserResponse) {}
}

service serverController {
  rpc createServer(server.request.types.createServerInput) returns (server.response.types.createServer) {}
  rpc getServersByUser(server.request.types.getServerByUser) returns (server.response.types.getManyServers) {}
  rpc getServer(server.request.types.getServerByServer) returns (server.response.types.getServer) {}
  rpc setUsersServer(server.request.types.setUsersServer) returns (server.response.types.getServer) {}
}

service planController {
  rpc getUsersPlans(plan.request.types.getPlanUser) returns (plan.response.types.getPlans) {}
  rpc getPlanById(plan.request.types.plansByUser) returns (plan.response.types.planData) {}
  rpc createPlan(plan.request.types.createPlan) returns (plan.response.types.planData) {}
  rpc updateUsersPlanById(plan.request.types.updatePlan) returns (plan.response.types.planData) {}
  rpc deleteUsersPlanById(plan.request.types.plansByUser) returns (plan.response.types.planData) {}
}

service transactionController {
  rpc initTransaction(transaction.request.types.createTransaction) returns (transaction.response.types.createTransaction) {}
  rpc getTransactionResult(transaction.request.types.transactionResult) returns (transaction.response.types.resultTransaction) {}
  rpc bigCommerceTransaction(transaction.request.types.bigCommerceTransaction) returns (transaction.response.types.createTransactionBigCommerce) {}
}

service CommandController {
  rpc getPendingToSendTransaction(command.request.types.getPendingTransactionInput) returns (command.response.types.commandArray) {}
  rpc getExpiredToSendTransaction(command.request.types.getPendingTransactionInput) returns (command.response.types.commandArray) {}
  rpc changeCommandToSend(command.request.types.changeOrGetCommandInput) returns (command.response.types.command) {}
  rpc changeCommandToSendExpired(command.request.types.changeOrGetCommandInput) returns (command.response.types.command) {}
  rpc getCommandById(command.request.types.changeOrGetCommandInput) returns (command.response.types.command) {}
  rpc changeCommandStatus(command.request.types.changeCommandStatusInput) returns (command.response.types.command) {}
  rpc changeExpireDate(command.request.types.changeExpireDate) returns (command.response.types.command) {}
}
