# Source: tomas-service/charts/capsula-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: core-service
  namespace: default
  labels:
    helm.sh/chart: core-service-0.1.17
    app.kubernetes.io/name: core-service
    app.kubernetes.io/instance: core-service
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    version: "latest"
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 3000
      targetPort: 3000

  selector:
    app.kubernetes.io/name: core-service
    app.kubernetes.io/instance: core-service
---
# Source: tomas-service/charts/capsula-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-service
  labels:
    helm.sh/chart: core-service-0.1.17
    app.kubernetes.io/name: core-service
    app.kubernetes.io/instance: core-service
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    version: "latest"
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: core-service
      app.kubernetes.io/instance: core-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: core-service
        app.kubernetes.io/instance: core-service
    spec:
      imagePullSecrets:
        - name: regcred
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: core-service
          image: "blacksinx/paycraft-mono-repo_core:latest"
          imagePullPolicy: Always
          ports:
            - name: grpc
              containerPort: 3000
          livenessProbe:
            grpc:
              port: 3000
            initialDelaySeconds: 20

          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: databaseUrl
                  name: core-secrets
            - name: APPLICATION_NAME
              valueFrom:
                secretKeyRef:
                  key: applicationName
                  name: core-secrets
            - name: SERVICE_ACCOUNT
              valueFrom:
                secretKeyRef:
                  key: serviceAccount
                  name: core-secrets
            - name: CONTENTFUL_SPACE_ID
              valueFrom:
                secretKeyRef:
                  key: contentfulSpaceId
                  name: core-secrets
            - name: CONTENTFUL_ENVIRONMENT_ID
              valueFrom:
                secretKeyRef:
                  key: contentfulEnvironmentId
                  name: core-secrets
            - name: CONTENTFUL_MANAGE_TOKEN
              valueFrom:
                secretKeyRef:
                  key: contentfulManageToken
                  name: core-secrets
            - name: TBK_RETURN_URL
              valueFrom:
                secretKeyRef:
                  key: tbkReturnUrl
                  name: core-secrets
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisUrl
                  name: core-secrets
            - name: CORE_SERVER_GRPC
              valueFrom:
                secretKeyRef:
                  key: coreServerGrpc
                  name: core-secrets

          resources:
            limits:
              cpu: 900m
              memory: 990Mi
            requests:
              cpu: 80m
              memory: 40Mi
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: core-service
#  annotations:
#    nginx.ingress.kubernetes.io/ssl-redirect: "true"
#    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
#  labels:
#    helm.sh/chart: core-service-0.1.17
#    app.kubernetes.io/name: core-service
#    app.kubernetes.io/instance: core-service
#    app.kubernetes.io/version: "latest"
#    app.kubernetes.io/managed-by: Helm
#    version: "latest"
#spec:
#  ingressClassName: nginx
#  tls:
#    - hosts:
#        - grpc.alphacode.cl
#      secretName: tls-secret
#  rules:
#    - host: "grpc.alphacode.cl"
#      http:
#        paths:
#          - path: /
#            pathType: "Prefix"
#            backend:
#              service:
#                name: core-service
#                port:
#                  number: 3000
